{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanup = exports.render = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _domTestingLibrary = require('dom-testing-library');\n\nObject.keys(_domTestingLibrary).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _domTestingLibrary[key];\n    }\n  });\n});\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _testUtils = require('react-dom/test-utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar mountedContainers = new Set();\n\nfunction render(ui) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      container = _ref.container,\n      _ref$baseElement = _ref.baseElement,\n      baseElement = _ref$baseElement === undefined ? container : _ref$baseElement,\n      queries = _ref.queries;\n\n  if (!container) {\n    // default to document.body instead of documentElement to avoid output of potentially-large\n    // head elements (such as JSS style blocks) in debug output\n    baseElement = document.body;\n    container = document.body.appendChild(document.createElement('div'));\n  } // we'll add it to the mounted containers regardless of whether it's actually\n  // added to document.body so the cleanup method works regardless of whether\n  // they're passing us a custom container or not.\n\n\n  mountedContainers.add(container);\n\n  _reactDom2.default.render(ui, container);\n\n  return _extends({\n    container: container,\n    baseElement: baseElement,\n    // eslint-disable-next-line no-console\n    debug: function debug() {\n      var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : baseElement;\n      return console.log((0, _domTestingLibrary.prettyDOM)(el));\n    },\n    unmount: function unmount() {\n      return _reactDom2.default.unmountComponentAtNode(container);\n    },\n    rerender: function rerender(rerenderUi) {\n      render(rerenderUi, {\n        container: container,\n        baseElement: baseElement\n      }); // Intentionally do not return anything to avoid unnecessarily complicating the API.\n      // folks can use all the same utilities we return in the first place that are bound to the container\n    },\n    asFragment: function asFragment() {\n      if (typeof document.createRange === 'function') {\n        return document.createRange().createContextualFragment(container.innerHTML);\n      }\n\n      var template = document.createElement('template');\n      template.innerHTML = container.innerHTML;\n      return template.content;\n    }\n  }, (0, _domTestingLibrary.getQueriesForElement)(baseElement, queries));\n}\n\nfunction cleanup() {\n  mountedContainers.forEach(cleanupAtContainer);\n} // maybe one day we'll expose this (perhaps even as a utility returned by render).\n// but let's wait until someone asks for it.\n\n\nfunction cleanupAtContainer(container) {\n  if (container.parentNode === document.body) {\n    document.body.removeChild(container);\n  }\n\n  _reactDom2.default.unmountComponentAtNode(container);\n\n  mountedContainers.delete(container);\n} // fallback to synthetic events for React events that the DOM doesn't support\n\n\nvar syntheticEvents = ['select', 'mouseEnter', 'mouseLeave'];\nsyntheticEvents.forEach(function (eventName) {\n  document.addEventListener(eventName.toLowerCase(), function (e) {\n    _testUtils.Simulate[eventName](e.target, e);\n  });\n}); // just re-export everything from dom-testing-library\n\nexports.render = render;\nexports.cleanup = cleanup;","map":null,"metadata":{},"sourceType":"script"}